<?php/** * Created by PhpStorm. * User: Himel * Date: 8/18/14 * Time: 5:41 PM */ use Illuminate\Database\Eloquent\SoftDeletingTrait;class JobOffer extends Eloquent{	use SoftDeletingTrait;    public static $PENDING = 'Pending';    public static $APPROVED = 'Approved';    public static $CANCELED = 'Canceled';    public static $ACCEPTED = 'Accepted';    public static $PAUSED = 'Paused';    public static $COMPLETED = 'Completed';    public static $PROGRESS = 'Progress';    public static $DECLINED = 'Declined';	/**     * Table Name     * @var string     */    protected $table="job_offers";    /**     * White list for fields     * @var array     */    protected $fillable = array('freelancer_id','client_id','job_post_id','job_offer_status','job_offer_status_reason','job_offer_price');		public static function Persist($postData)    {        if(!empty($postData['id']))        {            $jobOffer = self::find($postData['id']);			if(!empty($postData['freelancer_id']))                $jobOffer->freelancer_id = $postData['freelancer_id'];						if(!empty($postData['client_id']))                $jobOffer->client_id = $postData['client_id'];            			if(!empty($postData['job_post_id']))                $jobOffer->job_post_id = $postData['job_post_id'];            if(!empty($postData['title']))                $jobOffer->title = $postData['title'];            if(!empty($postData['description']))                $jobOffer->description = $postData['description'];						if(!empty($postData['job_offer_status']))                $jobOffer->job_offer_status = $postData['job_offer_status'];						if(!empty($postData['job_offer_status_reason']))                $jobOffer->job_offer_status_reason = $postData['job_offer_status_reason'];						if(!empty($postData['job_offer_price']))                $jobOffer->job_offer_price = $postData['job_offer_price'];            if(!empty($postData['job_offer_hour']))                $jobOffer->job_offer_hour = $postData['job_offer_hour'];            $jobOffer->save();            return $jobOffer;        }        else        {            $jobOffer = self::firstOrNew(array(                'freelancer_id' => $postData['freelancer_id'],                'client_id' => $postData['client_id'],                'job_post_id' => $postData['job_post_id'],                'job_offer_status' => $postData['job_offer_status'],				'job_offer_status_reason' => $postData['job_offer_status_reason'],				'job_offer_price' => $postData['job_offer_price'],            ));            if(!empty($postData['title']))                $jobOffer->title = $postData['title'];            if(!empty($postData['description']))                $jobOffer->description = $postData['description'];            if(!empty($postData['job_offer_hour']))                $jobOffer->job_offer_hour = $postData['job_offer_hour'];            $jobOffer->save();            return $jobOffer;        }    }		public function JobPost()    {        return $this->belongsTo('JobPost','job_post_id','id');    }		public function Client()    {        return $this->belongsTo('JobOffer','client_id','id');    }    public function Freelancer(){        return $this->belongsTo('Freelancer', 'freelancer_id', 'id');    }    public function JobPhase()    {        return $this->hasMany('JobPhase','job_offer_id','id');    }    public function WaitingJobPhase()    {        return $this->hasMany('JobPhase','job_offer_id','id')->where('phase_payment_status','Waiting');    }    public function JobStatus()    {        return $this->hasMany('JobOffer','job_offer_id','id');    }    public function Feedback()    {        return $this->hasOne('Feedback','job_offer_id','id');    }    public function Comments()    {        return $this->morphMany('Comment','jobthread')->where('jobthread_type','JobOffer');    }    public static function boot()    {        parent::boot();        static::created(function($jobOffer){            if($jobOffer->job_offer_status == self::$PENDING){                self::pendingAdmin($jobOffer);                self::newStatus($jobOffer);            }else if($jobOffer->job_offer_status == self::$ACCEPTED){                self::acceptFreelancer($jobOffer);                self::newStatus($jobOffer);            }        });        static::updating(function($jobOffer){            $att = $jobOffer->getAttributes();            $ori_att = $jobOffer->getOriginal();//            Helpers::debug($att);            if($att['job_offer_status']!=$ori_att['job_offer_status']){//                Helpers::debug($ori_att,1);                if($jobOffer->job_offer_status == self::$PENDING){                    self::pendingAdmin($jobOffer);                    self::newStatus($jobOffer);                }elseif($jobOffer->job_offer_status == self::$APPROVED){                    self::approveFreelancer($jobOffer);                    self::approveClient($jobOffer);                    self::newStatus($jobOffer);                }else if($jobOffer->job_offer_status == self::$CANCELED){                    self::cancelClient($jobOffer);                    self::newStatus($jobOffer);                }else if($jobOffer->job_offer_status == self::$ACCEPTED){                    self::acceptClient($jobOffer);                    self::newStatus($jobOffer);                }else if($jobOffer->job_offer_status == self::$DECLINED){                    self::declineClient($jobOffer);                    self::newStatus($jobOffer);                }else if($jobOffer->job_offer_status == self::$PROGRESS){                    self::newStatus($jobOffer);                    self::progressJobPost($jobOffer);                }else if($jobOffer->job_offer_status == self::$COMPLETED){                    self::completeFreelancer($jobOffer);                    self::newStatus($jobOffer);                }            }        });    }    private static function progressJobPost($jobOffer){        $jobPost = JobPost::find($jobOffer->job_post_id);//        Helpers::debug($jobOffer,1);        if($jobPost->job_status == 'Accepted'){            JobPost::Persist(array('id'=>$jobPost->id,'job_status'=>'Progress'));        }    }    private static function newStatus($jobOffer){        $loggedUser = Helpers::AdminToGeneralProfileAccess();        $data['job_offer_id']=$jobOffer->id;        $data['status_changer_id']=($loggedUser->user_type=='Admin')?$loggedUser->user_id:$loggedUser->user_id;        $data['status_changer_type']=$loggedUser->user_type;        $data['status_name']=$jobOffer->job_offer_status;        $data['status_reason']=$jobOffer->job_offer_status_reason;        $jobStatus = JobOfferStatus::Persist($data);    }    private static function pendingAdmin($jobOffer){        $loggedUser = Helpers::AdminToGeneralProfileAccess();        $data = array(            'url'         => 'admin/job-invitation',            'read_status' => 0,            'receiver_type' => 'Admin',            'notification_type' => 'New Job Offer',            'sender_id' => $loggedUser->user_id,            'sender_type' => $loggedUser->user_type,            'object_id'   => Helpers::EncodeDecode($jobOffer->id)        );        $freelancer = $jobOffer->Freelancer;        $jobPost = JobPost::find($jobOffer->job_post_id);        $client = Client::find($jobOffer->client_id);        $admins = Admin::all();        if(count($admins))        {            foreach($admins as $admin)            {                $admin = Admin::find($admin->id);                $msgbody = '<strong><a target="_blank" href="http://'.CLIENT_DOMAIN.'/view/client/'.Helpers::EncodeDecode($client->id).'">'.$client->first_name. ' '. $client->last_name. '</a> has been invited to                            <a target="_blank" href="http://'.CLIENT_DOMAIN.'/view/freelancer/'.Helpers::EncodeDecode($freelancer->id).'">'.$freelancer->first_name. ' '. $freelancer->last_name. '</a>.                            </strong><br/>Please click following link to read job details and approve job invitation:<br/>                        <a target="_blank" href="http://'.CLIENT_DOMAIN.'/jobPost/view/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">'.$jobOffer->title.'</a>';                $data['receiver_id'] = $admin->id;                $data['subject']     = ' Job Offer';                $data['message']     = $msgbody;                $notification = Notification::Persist($data);                $emailBody  = 'Hi Administrator, <br/>'.$client->first_name. ' '.$client->last_name.' send a job offer to "'.$freelancer->getName().'" For the Job "'. $jobPost->title.'"<br/>';                $emailBody .= 'To approve this job offer please click <a href="http://'.CLIENT_DOMAIN.'/admin/job-invitation/'.Helpers::EncodeDecode($notification->id).'">Here</a>';                Email::SendNotification('emails.notification.job-post-admin',array(                    'body'     => $emailBody,                    'link'     => 'http://'.CLIENT_DOMAIN.'/admin/new-job/'.Helpers::EncodeDecode($notification->id),                    'name'     => 'Administrator',                    'email'    => $admin->email,                    'title'    => $jobPost->title,                    'subject'  => 'Job Offer created - '. $jobPost->title,                    'jobTitle' => $jobPost->title.' Job Posted by '.$client->first_name. ' '. $client->last_name                ));            }            Email::SendNotification('emails.notification.joboffer.created',array(                'body'     => '',                'link'     => 'http://'.CLIENT_DOMAIN.'/jobPost/view/'.Helpers::EncodeDecode($jobPost->id),                'name'     => $client->first_name. ' '. $client->last_name,                'email'    => $client->email,                'title'    => $jobPost->title,                'subject'  => 'Job offer Created - '. $jobOffer->title,                'job_offer_title' => $jobOffer->title,                'freelancer_name' => $freelancer->getName()            ));        }    }    public function getDescriptionAttribute($value)    {        return str_replace("<br>","\n", html_entity_decode(strip_tags($value,"<br>"), ENT_QUOTES, 'utf-8'));    }    private static function approveFreelancer($jobOffer){        $loggedUser = Helpers::AdminToGeneralProfileAccess();        $data = array(            'url'         => 'job-invitation',            'read_status' => 0,            'receiver_type' => 'Freelancer',            'notification_type' => 'Job Invitation',            'sender_id' => $jobOffer->client_id,            'sender_type' => 'Client',            'object_id'   => Helpers::EncodeDecode($jobOffer->id)        );        $freelancer = $jobOffer->Freelancer;        $client = Client::find($jobOffer->client_id);        $jobPost = JobPost::find($jobOffer->job_post_id);//        Helpers::debug($client);        $msgbody = '<strong><a target="_blank" href="http://'.FREELANCER_DOMAIN.'/view/client/'.Helpers::EncodeDecode($client->id).'">'.$client->first_name. ' '. $client->last_name. '</a>                has been invited to you.</strong><br/>Please click following link to read job details and accept job invitation:<br/>                <a target="_blank" href="http://'.FREELANCER_DOMAIN.'/view/job/'.Helpers::EncodeDecode($jobPost->job_category_id).'/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">'.$jobOffer->title.'</a>';        $data['receiver_id'] = $freelancer->id;        $data['subject']     = 'Job Invitation';        $data['message']     = $msgbody;        $notification = Notification::Persist($data);        $emailBody  = 'Hi '.$freelancer->getName().', <br/>'.$client->first_name. ' '.$client->last_name.' send a job offer for the Job "'. $jobPost->title.'"<br/>';        $emailBody .= 'To accept this job offer please click <a href="http://'.FREELANCER_DOMAIN.'/freelancer/job-invitation/'.Helpers::EncodeDecode($notification->id).'">Here</a>';               Email::SendNotification('emails.notification.joboffer.accept',array(                'body'     => '',                'link'     => 'href="http://'.FREELANCER_DOMAIN.'view/job/'.Helpers::EncodeDecode($jobPost->job_category_id).'/'.Helpers::EncodeDecode($jobOffer->job_post_id),                'name'     => $freelancer->getName(),                'client'   => $client->first_name. ' '. $client->last_name,                'email'    => $freelancer->email,                'title'    => $jobPost->title . ' - ' . $jobOffer->title,                'subject'  => 'Job Invitation - '. $jobOffer->title,                'job_offer_title' => $jobOffer->title,                'freelancer_name' => $freelancer->getName()        ));    }    private static function completeFreelancer($jobOffer){        $loggedUser = Helpers::AdminToGeneralProfileAccess();        $data = array(            'url'         => 'notification',            'read_status' => 0,            'receiver_type' => 'Freelancer',            'notification_type' => 'Job Offer Complete',            'sender_id' => $loggedUser->user_id,            'sender_type' => $loggedUser->user_type,            'object_id'   => Helpers::EncodeDecode($jobOffer->id)        );        $freelancer = $jobOffer->Freelancer;        $client = Client::find($jobOffer->client_id);        $jobPost = JobPost::find($jobOffer->job_post_id);        $msgbody = '<strong><a target="_blank" href="http://'.FREELANCER_DOMAIN.'/view/client/'.Helpers::EncodeDecode($client->id).'">'.$client->first_name. ' '. $client->last_name. '</a>                has been closed your job offer.</strong><br/>Please click following link to read job details:<br/>                <a target="_blank" href="http://'.FREELANCER_DOMAIN.'/view/job/'.Helpers::EncodeDecode($jobPost->job_category_id).'/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">'.$jobOffer->title.'</a>';        $data['receiver_id'] = $freelancer->id;        $data['subject']     = 'Job Offer Complete';        $data['message']     = $msgbody;        Notification::Persist($data);        $emailBody  = 'Hi '.$freelancer->getName().', <br/>'.$client->first_name. ' '.$client->last_name.' has been closed job offer for job "'. $jobPost->title.'"<br/>';        $emailBody .= 'To check details of this job offer please click <a target="_blank" href="http://'.FREELANCER_DOMAIN.'/view/job/'.Helpers::EncodeDecode($jobPost->job_category_id).'/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">'.$jobOffer->title.'</a>';        Email::SendNotification('emails.notification.joboffer.completed',array(                'body'     => '',                'link'     => 'http://'.FREELANCER_DOMAIN.'/freelancer/job-history',                'name'     => $freelancer->getName(),                'client'   => $client->first_name. ' '. $client->last_name,                'email'    => $freelancer->email,                'title'    => $jobPost->title . ' - ' . $jobOffer->title,                'subject'  => 'Job Invitation - '. $jobOffer->title,                'job_offer_title' => $jobOffer->title,                'job_title' => $jobPost->title,                'freelancer_name' => $freelancer->getName()        ));    }    private static function approveClient($jobOffer){        $loggedUser = Helpers::AdminToGeneralProfileAccess();        $data = array(            'url'         => 'notification/view',            'read_status' => 0,            'receiver_type' => 'Client',            'notification_type' => 'JobOffer',            'sender_id' => $loggedUser->user_id,            'sender_type' => $loggedUser->user_type,            'object_id'   => Helpers::EncodeDecode($jobOffer->id)        );        $freelancer = $jobOffer->Freelancer;        $jobPost  = $jobOffer->JobPost;        $client = Client::find($jobOffer->client_id);        $msgbody = '<strong>Your job offer has been approved.</strong><br/>Please click following link to see job details:<br/>                <a target="_blank" href="http://'.CLIENT_DOMAIN.'/jobPost/view/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">'.$jobOffer->title.'</a>';        $data['receiver_id'] = $client->id;        $data['subject']     = 'Job Approved';        $data['message']     = $msgbody;        Notification::Persist($data);               Email::SendNotification('emails.notification.joboffer.approved',array(                'body'     => '',                'link'     => 'http://'.CLIENT_DOMAIN.'/jobPost/view/'.Helpers::EncodeDecode($jobPost->id),                'name'     => $client->first_name. ' '. $client->last_name,                'email'    => $client->email,                'title'    => $jobPost->title,                'subject'  => 'Job offer Created - '. $jobOffer->title,                'job_offer_title' => $jobOffer->title,                'freelancer_name' => $freelancer->getName()        ));        /*Email::SendNotification('emails.notification.joboffer.delivered',array(                'body'     => '',                'link'     => 'http://'.FREELANCER_DOMAIN.'/freelancer/my-job-invitation',                'name'     => $freelancer->getName(),                'email'    => $freelancer->email,                'title'    => $jobPost->title . ' - ' . $jobOffer->title,                'subject'  => 'Job offer Created - '. $jobOffer->title,                'job_offer_title' => $jobOffer->title,                'freelancer_name' => $freelancer->getName()        ));*/    }    private static function cancelClient($jobOffer){        $loggedUser = Helpers::AdminToGeneralProfileAccess();        $data = array(            'url'         => 'notification/view',            'read_status' => 0,            'receiver_type' => 'Client',            'notification_type' => 'JobOffer',            'sender_id' => $loggedUser->user_id,            'sender_type' => $loggedUser->user_type,            'object_id'   => Helpers::EncodeDecode($jobOffer->id)        );        $client = Client::find($jobOffer->client_id);        $msgbody = '<strong>Your job offer has been canceled.</strong><br/>Please click following link to see job details:<br/>                <a target="_blank" href="http://'.CLIENT_DOMAIN.'/jobPost/view/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">'.$jobOffer->title.'</a><br/><br/>                If you need any query then please contact with support team.';        $data['receiver_id'] = $client->id;        $data['subject']     = 'Job Canceled';        $data['message']     = $msgbody;        Notification::Persist($data);        $emailBody  = 'Hi '.$client->first_name. ' '.$client->last_name.', <br/> your job offer canceled by Administrator <br/>';        $emailBody .= 'Please click following link to see job details: <a target="_blank" href="http://'.CLIENT_DOMAIN.'/jobPost/view/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">Here</a>';        Email::SendNotification('emails.notification.jobOffer.cancelled',array(            'body'     => $emailBody,              'name'     => $client->first_name. ' '.$client->last_name,            'email'    => $client->email,            'title'    => 'Job offer Canceled - '.$jobOffer->title,            'subject'  => 'Job offer canceled - '.$jobOffer->title,            'job_offer_title' => $jobOffer->title,        ));    }    private static function acceptClient($jobOffer){        $loggedUser = Helpers::AdminToGeneralProfileAccess();        $data = array(            'url'         => 'notification/view',            'read_status' => 0,            'receiver_type' => 'Client',            'notification_type' => 'JobOffer',            'sender_id' => $loggedUser->user_id,            'sender_type' => $loggedUser->user_type,            'object_id'   => Helpers::EncodeDecode($jobOffer->id)        );        $client = Client::find($jobOffer->client_id);        $freelancer = $jobOffer->Freelancer;        $jobPost = $jobOffer->JobPost;        $msgbody = '<strong>Your job offer has been accepted by <a target="_blank" href="http://'.CLIENT_DOMAIN.'/view/freelancer/'.Helpers::EncodeDecode($freelancer->id).'">'.$freelancer->first_name. ' '. $freelancer->last_name. '</a>                    .</strong><br/>Please click following link to see job details:<br/>                <a target="_blank" href="http://'.CLIENT_DOMAIN.'/jobPost/view/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">'.$jobOffer->title.'</a><br/><br/>                ';        $data['receiver_id'] = $client->id;        $data['subject']     = 'Job Accepted';        $data['message']     = $msgbody;        Notification::Persist($data);        $emailBody  = 'Hi '.$client->first_name. ' '.$client->last_name.', <br/> your job offer accepted by '.$freelancer->getName().' <br/>';        $emailBody .= 'Please click following link to see job details: <a target="_blank" href="http://'.CLIENT_DOMAIN.'/jobPost/view/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">Here</a>';        Email::SendNotification('emails.notification.joboffer.accepted',array(            'body'     => '',              'name'     => $client->first_name. ' '. $client->last_name,            'email'    => $client->email,            'title'    => 'Job Offer Accepted - '.$jobOffer->title,            'subject'  => 'Job Offer Accepted - '.$jobOffer->title,            'job_offer_title' => $jobOffer->title,            'freelancer' => $freelancer->getName(),            'link'     =>  'http://'.CLIENT_DOMAIN.'/jobPost/view/'.Helpers::EncodeDecode($jobOffer->job_post_id)        ));    }    private static function acceptFreelancer($jobOffer){        $loggedUser = Helpers::AdminToGeneralProfileAccess();        $data = array(            'url'         => 'notification',            'read_status' => 0,            'receiver_type' => 'Freelancer',            'notification_type' => 'JobOffer',            'sender_id' => $loggedUser->user_id,            'sender_type' => $loggedUser->user_type,            'object_id'   => Helpers::EncodeDecode($jobOffer->id)        );//        Helpers::debug($jobOffer,1);        $client = Client::find($jobOffer->client_id);        $freelancer = $jobOffer->Freelancer;        $jobPost = JobPost::find($jobOffer->job_post_id);//        Helpers::debug($freelancer,1);        $msgbody = '<strong>Your job request has been accepted by <a target="_blank" href="http://'.FREELANCER_DOMAIN.'/view/client/'.Helpers::EncodeDecode($client->id).'">'.$client->first_name. ' '. $client->last_name. '</a>                    .</strong><br/>Please click following link to see job details:<br/>                <a target="_blank" href="http://'.FREELANCER_DOMAIN.'/view/job/'.Helpers::EncodeDecode($jobPost->job_category_id).'/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">'.$jobOffer->title.'</a><br/><br/>                ';        $data['receiver_id'] = $freelancer->id;        $data['subject']     = 'Job Accepted';        $data['message']     = $msgbody;//        Helpers::debug($data,1);        Notification::Persist($data);               Email::SendNotification('emails.notification.jobOffer.accepted',array(            'body'     => '',              'name'     => $client->first_name. ' '. $client->last_name,            'email'    => $client->email,            'title'    => 'Job Offer Accepted - '.$jobOffer->title,            'subject'  => 'Job Offer Accepted - '.$jobOffer->title,            'job_offer_title' => $jobOffer->title,            'freelancer' => $freelancer->getName(),            'link'     =>  'http://'.CLIENT_DOMAIN.'/view/job/'.Helpers::EncodeDecode($jobPost->job_category_id).'/'.Helpers::EncodeDecode($jobOffer->job_post_id)        ));    }    private static function declineClient($jobOffer){        $loggedUser = Helpers::AdminToGeneralProfileAccess();        $data = array(            'url'         => 'notification/view',            'read_status' => 0,            'receiver_type' => 'Client',            'notification_type' => 'JobOffer',            'sender_id' => $loggedUser->user_id,            'sender_type' => $loggedUser->user_type,            'object_id'   => Helpers::EncodeDecode($jobOffer->id)        );        $client = Client::find($jobOffer->client_id);        $freelancer = $jobOffer->Freelancer;        $msgbody = '<strong>Your job offer has been declined by <a target="_blank" href="http://'.CLIENT_DOMAIN.'/view/freelancer/'.Helpers::EncodeDecode($freelancer->id).'">'.$freelancer->first_name. ' '. $freelancer->last_name. '</a>.</strong><br/>Please click following link to see job details:<br/>                <a target="_blank" href="http://'.CLIENT_DOMAIN.'/jobPost/view/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">'.$jobOffer->title.'</a><br/><br/>                If you need any query then please contact with support team.';        $data['receiver_id'] = $client->id;        $data['subject']     = 'Job Declined';        $data['message']     = $msgbody;        Notification::Persist($data);        $emailBody  = 'Hi '.$client->first_name.' '.$client->last_name.', <br/> your job offer declined by '.$freelancer->getName().' <br/>';        $emailBody .= 'Please click following link to see job details: <a target="_blank" href="http://'.CLIENT_DOMAIN.'/jobPost/view/'.Helpers::EncodeDecode($jobOffer->job_post_id).'">Here</a>';        Email::SendNotification('emails.notification.jobOffer.declined',array(            'body'     => '',              'name'     => $client->first_name. ' '. $client->last_name,            'email'    => $client->email,            'title'    => 'Job Offer Declined - '.$jobOffer->title,            'subject'  => 'Job Offer Declined - '.$jobOffer->title,            'job_offer_title' => $jobOffer->title,            'freelancer' => $freelancer->getName(),            'link'     =>  'http://'.CLIENT_DOMAIN.'/view/job/'.Helpers::EncodeDecode($jobPost->job_category_id).'/'.Helpers::EncodeDecode($jobOffer->job_post_id)        ));    }} 