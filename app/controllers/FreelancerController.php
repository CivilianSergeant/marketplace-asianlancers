<?php/** * Created by PhpStorm. * User: Himel * Date: 8/18/14 * Time: 1:36 PM */class FreelancerController extends BaseController{    protected $defaultRoute = 'freelancer/overview';    protected $userAccount;    protected $user_id;    public function __construct()    {        parent::__construct();        $loggedUser = Helpers::AdminToGeneralProfileAccess();//Sentry::getUser();        $this->userAccount = $loggedUser;        $this->user_id = $this->userAccount->user_id;        View::share('authenticateUserInfo',$loggedUser);        $freelancer = Freelancer::find($this->user_id);        View::share('messageCount',DiscussionComments::UnreadMessageCount($this->user_id));        View::share('notifications',(count($freelancer))? $freelancer->UnreadNotifications : array());    }    public function Index()    {        $freelancer = Freelancer::find($this->user_id);        if(count($freelancer->ActiveJobs))            return Redirect::to('freelancer/active-jobs');        return Redirect::to($this->defaultRoute);    }    public function overview()    {        $viewModel = array();        $user = $this->userAccount;        $freelancer = Freelancer::with('RelatedTags','Certifications','ProfessionalBackgrounds','Educations')->where('id',$this->user_id)->first();        if(count($freelancer))            $freelancer->completed_percentage = $freelancer->GetProfileCompleteStatus($freelancer,$user);        $viewModel['freelancer'] = $freelancer;        $viewModel['educations'] = (count($freelancer)>0)? $freelancer->Educations : json_encode(array());        $viewModel['rskills'] = (count($freelancer)>0)? $freelancer->GetMyTags() : json_encode(array());        $viewModel['test_taken'] = (count($freelancer)>0)? $freelancer->numOfExamTaken() : json_encode(array());        $viewModel['certs'] = (count($freelancer)>0)? $freelancer->Certifications : json_encode(array());        $viewModel['prices'] = JobPriceCategory::all();        $viewModel['pbs'] = (count($freelancer)>0)? $freelancer->ProfessionalBackgrounds : json_encode(array());        $viewModel['user'] = $user;        return Theme::make('freelancer.index',$viewModel);    }    public function jobHistory()    {        $viewModel = array();        $freelancer = Freelancer::with('JobHistories','JobHistories.JobPost','JobHistories.Client','JobHistories.Feedback')->where('id',$this->user_id)->first();        //Helpers::debug($freelancer,1);        if(!empty($freelancer->id))        {            $jobHistories = $freelancer->JobHistories;            $viewModel['freelancer'] = $freelancer;            $viewModel['jobhistories'] = $jobHistories;            return Theme::make('freelancer.job-history',$viewModel);        }else{            Helpers::addMessage(400, ' No profile found for freelancer');            return Redirect::to($this->defaultRoute);        }    }    public function activeJobs()    {        $freelancer = Freelancer::find($this->user_id);        //Helpers::debug($freelancer,1);        if(!empty($freelancer->id))        {            $activeJobs = $freelancer->ActiveJobs;            $viewModel['freelancer'] = $freelancer;            $viewModel['activeJobs'] = $activeJobs;            return Theme::make('freelancer.active-jobs',$viewModel);        }else{            Helpers::addMessage(400, ' No profile found for freelancer');            return Redirect::to($this->defaultRoute);        }    }    public function finance()    {        $freelancer = Freelancer::find($this->user_id);        if(!empty($freelancer->id))        {            $payments = $freelancer->Payments();            $viewModel['freelancer'] = $freelancer;            $viewModel['payments'] = $payments;            return Theme::make('freelancer.payments',$viewModel);        }else{            Helpers::addMessage(400, ' No profile found for freelancer');            return Redirect::to($this->defaultRoute);        }    }    public function agencies()    {        if($this->userAccount->is_agent == 1)        {            return Redirect::to($this->defaultRoute);        }        $viewModel = array();        $errorMsg = array();        $freelancer = Freelancer::find($this->user_id);        if(!empty($freelancer->id))        {            $agencies = $freelancer->GetAgencies();            $viewModel['agencies'] = $agencies;            $viewModel['freelancer'] = $freelancer;            $viewModel['errorMsg'] = $errorMsg;            return Theme::make('freelancer.agencies',$viewModel);        }else{            Helpers::addMessage(400, ' No profile found for freelancer');            return Redirect::to($this->defaultRoute);        }    }    public function portfolio()    {        $viewModel = array();        $errorMsg = array();        $freelancer = Freelancer::find($this->user_id);        if(!empty($freelancer->id))        {            $portfolios = $freelancer->Portfolios;            $viewModel['freelancer'] = $freelancer;            $viewModel['portfolios'] = $portfolios;            $viewModel['filePath'] = 'cdn/profile/freelancer/portfolio/'.$freelancer->email.'/';            $viewModel['imgUrl'] = CDN.'profile/freelancer/portfolio/'.$freelancer->email.'/';            if(Request::isMethod('post'))            {                $path = 'cdn/profile/freelancer/portfolio/';                if(!File::exists($path))                {                    File::makeDirectory($path,0777);                }                $portfolioPath = $path.$freelancer->email.'/';                if(!File::exists($portfolioPath))                {                    File::makeDirectory($portfolioPath,0777);                }                $post_data = Input::all();                $post_data['freelancer_id'] = $this->user_id;                if(Input::hasFile('photo'))                {                    $ext = Input::file('photo')->getClientOriginalExtension();                    $name = Input::file('photo')->getClientOriginalName();                    $prefix = time();                    $name = $prefix.'_'.$name;                    if(in_array($ext,array('jpg','png','gif'))){                        Input::file('photo')->move($portfolioPath,$name);                        $post_data['image'] = $name;                    }                }                $errorMsg = PortfolioValidator::validate($post_data);                //Helpers::debug($errorMsg,1);                if(!count($errorMsg))                {                    $portfolio = Portfolio::Persist($post_data);                    //Helpers::debug($portfolio,1);                    Helpers::addMessage(200, ' New Portfolio added');                    return Redirect::to('freelancer/portfolio');                }            }            $viewModel['errorMsg'] = $errorMsg;            return Theme::make('freelancer.portfolio',$viewModel);        }else{            Helpers::addMessage(400, ' No profile found for freelancer');            return Redirect::to($this->defaultRoute);        }    }    public function portfolioDetails()    {        $id = Request::segment(3);        $portfolioId = Helpers::EncodeDecode($id,false);        $portfolio = Portfolio::find($portfolioId);        $freelancer = $portfolio->GetFreelancer;        if (count($portfolio)) {            $viewModel = array();            $viewModel['imgUrl'] = CDN.'profile/freelancer/portfolio/'.$freelancer->email.'/';            $viewModel['portfolio'] = $portfolio;            return Theme::make('freelancer.portfolio-details',$viewModel);        } else {            return Redirect::to($this->defaultRoute);        }    }    public function deletePortfolio()    {       $portfolioId = Request::segment(3);       $portfolioId = Helpers::EncodeDecode($portfolioId,false);       $portfolio   = Portfolio::find($portfolioId);       $portfolio->delete();       Helpers::addMessage(200, 'Portfolio Deleted successfully');       return Redirect::to($this->defaultRoute);    }    public function skills()    {        $viewModel = array();        $freelancer = Freelancer::find($this->user_id);        if(!empty($freelancer->id))        {            $skillTags = SkillTag::all();            $viewModel['skills'] = $skillTags;            $viewModel['rskills'] = $freelancer->GetMyTags();            $viewModel['tests'] = $freelancer->GetMyTests();            return Theme::make('freelancer.skills',$viewModel);        }else{            Helpers::addMessage(400, ' No profile found for freelancer');            return Redirect::to($this->defaultRoute);        }    }    /**     * Add Skill is a functionality that assign existing skill or new skill with a association.     * but for naming convention we choose addSkill for url(freelancer/add-skill) , so as a perspective of     * a Freelancer he will act like adding skills for his own     */    public function addSkill()    {        if(Request::isMethod('post'))        {            $post_data = Input::all();                       $skills = $post_data['category_name']['skill'];            $responses = array();            foreach($skills as $i=> $skill){                                                       $skillTag = SkillTag::GetByName($skill['category_name']);                    $freelancer = Freelancer::find($this->user_id);                    if(!empty($skillTag->id) && !empty($freelancer->id))                    {                        $response = $freelancer->assignTag($freelancer,$skillTag);                        if($response['exists'] == 0)                        {                            $skillObj = $response['obj']->GetTag;                            $response['obj']['skill'] = $skillObj;                            array_push($responses, array('status'=>200, 'result'=>$response['obj'],'msg'=>array($skillObj->category_name.' added')));                        }elseif($response['exists'] == 2)                        {                            $skillObj = $response['obj']->GetTag;                            $response['obj']['skill'] = $skillObj;                            array_push($responses, array('status'=>200, 'result'=>$response['obj'], 'msg'=>array($skillObj->category_name.' Tag activated')));                        }else{                            $skillObj = $response['obj']->GetTag;                            array_push($responses, array('status'=>400,'result'=>$response['obj'], 'msg'=>array($skillObj->category_name.' Tag already assigned')));                        }                    }                            }            //Helpers::debug($responses,1);            return $responses;            //return array('status'=>400, 'msg'=>array(array('Tag you specified can not be added')));        }else{            return Redirect::to($this->defaultRoute);        }    }    public function updateSkillDisplay()    {        if(Request::isMethod('post'))        {            $post_data = Input::all();            $relatedTag = RelatedTag::find($post_data['id']);            if(count($relatedTag))            {                $relatedTag->display = $post_data['value'];                $relatedTag->save();            }            return array('msg'=>'Skill Display Changed','status'=>200);        }else{            return Redirect::to($this->defaultRoute);        }    }    public function removeSkill()    {        if(Request::isMethod('post'))        {            $id = Input::get('id');            $relatedTag = RelatedTag::find($id);            if(count($relatedTag))                $relatedTag->delete();            return 1;        }else{            return Redirect::to($this->defaultRoute);        }    }    public function initiate()    {        if(Request::isMethod('post'))        {            $post_data = Input::all();            $saveData = array(                'profile_title' => $post_data['basic']['profile_title'],                'first_name'    => $post_data['basic']['first_name'],                'last_name'     => $post_data['basic']['last_name'],                'email'        => $post_data['basic']['email'],                'overview'     => $post_data['basic']['overview'],                'mobile'       => $post_data['contact']['mobile'],                'phone'        => $post_data['contact']['phone'],                'address'      => $post_data['contact']['address'],                'freelancer_type' => ($this->userAccount->is_agent)? 'Agency' : 'Individual'            );            $freelancer = Freelancer::Persist($saveData);            if(!empty($freelancer->id))            {                $user = $this->userAccount;                $user->user_id = $freelancer->id;                $user->save();                return array('status'=>200, 'url'=>url('freelancer'));            }else{                return array('status'=> 400, 'msg' =>array(array('Unable to create your profile. try again few minutes later.')));            }        }else{            return Redirect::to('/');        }    }    public function Remove()    {        //$freelancer = Freelancer::find(1);        //$freelancer->delete();    }    public function editContact()    {        $viewModel = array();        $freelancer = Freelancer::GetFreelancerByEmail($this->userAccount->email);        $viewModel['user_data'] = $freelancer;        $viewModel['country'] = Country::all();        return Theme::make('freelancer.individual-profile-contact',$viewModel);    }    public function UpdateContact()    {        $viewModel = array();        $freelancer = Freelancer::GetFreelancerByEmail($this->userAccount->email);        if (Request::isMethod('post'))        {            $post_data = Input::all();            $post_data['id'] = $this->user_id;            Freelancer::Persist($post_data);            return array('status'=>200,'url'=>url('freelancer/overview'));        }else{            return Theme::make('freelancer.individual-profile-contact',$viewModel);        }    }    public function uploadPhoto()    {        if(Request::isMethod('post'))        {            $freelancer = Freelancer::find($this->user_id);            $post_data = array();            if(Input::hasFile('photo'))            {                $ext = Input::file('photo')->getClientOriginalExtension();                $name = Input::file('photo')->getClientOriginalName();                $path = 'cdn/profile/freelancer/';                if($freelancer->freelancer_type == 'Individual')                {                    $path .= 'individual/';                }                else{                    $path .= 'agency/';                }                $prefix = time();                $name = $prefix.'_'.$name;                if(in_array($ext,array('jpg','png','gif'))){                    Input::file('photo')->move($path,$name);                    $post_data['id'] = $this->user_id;                    $post_data['photos'] = $name;                    Freelancer::Persist($post_data);                }else{                    Helpers::addMessage(400, " File extension {$ext} not supported");                }            }else{                Helpers::addMessage(400, " No file uploaded");            }            return Redirect::to($this->defaultRoute);        }else{            return Redirect::to($this->defaultRoute);        }    }    public function updateOverview()    {        if(Request::isMethod('post'))        {            $post_data = Input::all();            $post_data['id'] = $this->user_id;  // current session $user->user_id , its not $user->id            $freelancer = Freelancer::Persist($post_data);            $this->userAccount->first_name = $post_data['first_name'];            $this->userAccount->last_name = $post_data['last_name'];            $this->userAccount->save();            return array('status'=>200,'result'=>$freelancer);        }else{            return Redirect::to('freelancer/overview');        }    }    public function changeWidgetStatus()    {        if(Request::isMethod('post'))        {            $post_data = Input::all();            $post_data['id'] = $this->user_id;            $freelancer = Freelancer::Persist($post_data);            return array('status'=>200,'result'=>$freelancer);        }else{            return Redirect::to('freelancer/overview');        }    }    public function saveEdu()    {        if(Request::isMethod('post'))        {            $post_data = Input::all();            $post_data['freelancer_id'] = $this->user_id;            $errorMsg = EducationValidator::validate($post_data);            if(count($errorMsg))            {                return array('status'=>'400','msg'=>$errorMsg);            }            $education = Education::Persist($post_data);            if(!empty($education) && !empty($education['obj']->id))            {                return array('status'=>$education['status'],'url'=> url($this->defaultRoute), 'result'=>$education['obj']);            }            else{                return array('status'=>'400','msg'=>array(array('Sorry education information not saved')));            }        }else{            return Redirect::to($this->defaultRoute);        }    }    public function deleteEdu()    {        if(Request::isMethod('post'))        {            $id = Input::get('id');            $education = Education::find($id);            $education->delete();            return 1;        }        else        {            return Redirect::to($this->defaultRoute);        }    }    public function saveCert()    {        if(Request::isMethod('post'))        {            $post_data = Input::all();            $post_data['freelancer_id'] = $this->user_id;            $errorMsg = CertValidator::validate($post_data);            if(count($errorMsg))            {                return array('status'=>'400','msg'=>$errorMsg);            }            $cert = Certification::Persist($post_data);            if(!empty($cert) && !empty($cert['obj']->id))            {                return array('status'=>$cert['status'],'url'=> url($this->defaultRoute), 'result'=>$cert['obj']);            }            else{                return array('status'=>'400','msg'=>array(array('Sorry education information not saved')));            }        }else{            return Redirect::to($this->defaultRoute);        }    }    public function deleteCert()    {        if(Request::isMethod('post'))        {            $id = Input::get('id');            $cert = Certification::find($id);            $cert->delete();            return 1;        }        else        {            return Redirect::to($this->defaultRoute);        }    }    public function savePbs()    {        if(Request::isMethod('post'))        {            $post_data = Input::all();            $post_data['freelancer_id'] = $this->user_id;            $errorMsg = PbsValidator::validate($post_data);            if(count($errorMsg))            {                return array('status'=>'400','msg'=>$errorMsg);            }            $pbs = ProfessionalBackground::Persist($post_data);            if(!empty($pbs) && !empty($pbs['obj']->id))            {                return array('status'=>$pbs['status'],'url'=> url($this->defaultRoute), 'result'=>$pbs['obj']);            }            else{                return array('status'=>'400','msg'=>array(array('Sorry education information not saved')));            }        }else{            return Redirect::to($this->defaultRoute);        }    }    public function deletePbs()    {        if(Request::isMethod('post'))        {            $id = Input::get('id');            $pbs = ProfessionalBackground::find($id);            $pbs->delete();            return 1;        }        else        {            return Redirect::to($this->defaultRoute);        }    }    public function teamInvitation()    {        $id = Request::segment(3);        $nid = Helpers::EncodeDecode($id,false);        $notification = Notification::find($nid);        if(count($notification))        {            $oid = Helpers::EncodeDecode($notification->object_id,false);            $freelancer = Freelancer::find($this->user_id);            $agencyMember = AgencyMember::find($oid);            if(count($agencyMember))            {                $viewModel = array('user'=>$this->userAccount,'notification'=>$notification,'agency_member'=>$agencyMember,'freelancer'=>$freelancer);                return Theme::make('notification.team-invitation',$viewModel);            }else{                Helpers::addMessage(400, 'No team-invitation found, may be link was expired.');                return Redirect::to('freelancer/overview');            }        }else{            Helpers::addMessage(400, ' No invitation notification found');            return Redirect::to($this->defaultRoute);        }    }    public function setTeamInvitation()    {        if(Request::isMethod('post'))        {            $post_all = Input::all();            $agencyMember = AgencyMember::Persist($post_all);            return $agencyMember;        }else{            return Redirect::to($this->defaultRoute);        }    }    public function MyjobInvitation()    {        $viewModel = array();        $freelancer = Freelancer::find($this->user_id);        if(!empty($freelancer->id))        {            $viewModel['invitations'] = $freelancer->GetMyJobInvitation;            return Theme::make('freelancer.job-invitation',$viewModel);        }else{            return Redirect::to($this->defaultRoute);        }    }    public function MyJobRequest()    {        $viewModel = array();        $freelancer = Freelancer::find($this->user_id);        if(!empty($freelancer->id))        {            $viewModel['requests'] = $freelancer->GetMyJobRequest;            return Theme::make('freelancer.job-request',$viewModel);        }else{            return Redirect::to($this->defaultRoute);        }    }    public function jobOffers()    {        $viewModel = array();        return Theme::make('freelancer.job-offers',$viewModel);    }    public function jobInvitation()    {        $id = Request::segment(3);        $nid = Helpers::EncodeDecode($id,false);        $notification = Notification::find($nid);        if(count($notification))        {            $jobOffer = JobOffer::find(Helpers::EncodeDecode($notification->object_id,false));            Notification::ReadFlag(array('id'=>$nid,'read_status'=>1));            $viewModel = array('freelancer'=>$this->userAccount,'notification'=>$notification,'jobOffer'=>$jobOffer);            return Theme::make('notification.job-invitation',$viewModel);        }else{            Helpers::addMessage(400, ' No invitation notification found');            return Redirect::to($this->defaultRoute);        }    }    public function UpdateJobInvitation()    {        if(Request::isMethod('post'))        {            $post_all = Input::all();            //Helpers::debug($post_all,1);            if($post_all['job_offer_status']=="Accepted"){                $reason = "Job offer has been accepted by ".$this->userAccount->first_name." ".$this->userAccount->last_name;                $freelancer = Freelancer::find($this->userAccount->user_id);//                if(count($freelancer))//                {//                    $freelancer->available = 0;//                    $freelancer->save();//                }            }            else                $reason = "Job offer has been declined by ".$this->userAccount->first_name." ".$this->userAccount->last_name;            $jobOffer = JobOffer::Persist(array(                'id'=>$post_all['id'],                'job_offer_status_reason'=>$reason,                'job_offer_status'=>$post_all['job_offer_status']            ));            if($post_all['job_offer_status'] == 'Accepted'){                Helpers::addMessage(200, ' Job Offer has been'.$post_all['job_offer_status']);                $jobPost = JobPost::find($jobOffer->job_post_id);                if(count($jobPost) && $jobPost->job_status=='Approved'){                    $jobPost->job_status = "Progress";                    $jobPost->save();                }            }            else                Helpers::addMessage(400, ' Job Offer has been'.$post_all['job_offer_status']);            if(!empty($post_all['nid'])){                $notification = Notification::find($post_all['nid']);                if(count($notification))                {                    $notification->read_status = 1;                    $notification->save();                }            }            $jobPost = $jobOffer->JobPost;            if(!empty($post_all['url']))                return Redirect::to('freelancer/job-invitation/'.$post_all['url']);            else                return Redirect::to('view/job/'.Helpers::EncodeDecode($jobPost->job_category_id).'/'.Helpers::EncodeDecode($jobPost->id));        }else{            return Redirect::to('freelancer');        }    }    public function jobNotification()    {        $id = Request::segment(3);        $nid = Helpers::EncodeDecode($id,false);        $notification = Notification::find($nid);        if(count($notification))        {            //Helpers::debug(Helpers::EncodeDecode($notification->object_id,false),1);            $jobRequest = JobRequest::find(Helpers::EncodeDecode($notification->object_id,false));            $jobOffer = JobOffer::where(array('job_post_id'=>$jobRequest->job_id,'freelancer_id'=>$this->userAccount->user_id))->get();            Notification::ReadFlag(array('id'=>$nid,'read_status'=>1));            $viewModel = array('freelancer'=>$this->userAccount,'notification'=>$notification,'jobOffer'=>$jobOffer);            return Theme::make('notification.job-notification',$viewModel);        }else{            Helpers::addMessage(400, ' No invitation notification found');            return Redirect::to($this->defaultRoute);        }    }    public function notification()    {        $viewModel = array();        $id = Helpers::EncodeDecode(Request::segment(3),false);        $notification = Notification::find($id);        if(count($notification))        {            $viewModel['notification'] = $notification;            $notification->read_status = 1;            $notification->save();            return Theme::make('notification.freelancer.notification',$viewModel);        }else{            return Redirect::to($this->defaultRoute);        }    }    public function jobOffer()    {        $id = Helpers::EncodeDecode(Request::segment(3),false);        $jobOffer = JobOffer::find($id);        if(count($jobOffer))        {   $clientFeedback = Feedback::where('feedbacks_id',$jobOffer->client_id)->where('feedbacks_type','Client')->first();            $viewModel = array();            $viewModel['jobOffer'] = $jobOffer;            $viewModel['jobOfferPhases'] = $jobOffer->JobPhase;            $viewModel['client'] = Client::find($jobOffer->client_id);            $viewModel['feedback'] = $jobOffer->Feedback;            $viewModel['client_feedback'] = $clientFeedback;            return Theme::make('freelancer.job-offer',$viewModel);        }        else        {            Helpers::addMessage(400, ' Sorry no job offer found');            return Redirect::to($this->defaultRoute);        }    }    public function saveFeedback()    {        if(Request::isMethod('post'))        {            $postData = Input::all();            $feedback = Feedback::Persist(array(                'feedbacks_id'       => $postData['client_id'],                'feedbacks_type'     => 'Client',                'job_offer_id'       => $postData['job_offer_id'],                'feedback_score'     => $postData['score'],                'comment'            => $postData['comment'],            ));            if($feedback->id)                Helpers::addMessage(200, 'you feedback submitted');            return $feedback;        }        else        {            return Redirect::to($this->defaultRoute);        }    }    public function ProgressJob()    {        $viewModel = array();        $freelancer = Freelancer::find($this->user_id);        if(!empty($freelancer->id))        {            $progress_jobs = JobOffer::where(array('freelancer_id'=>$freelancer->id))                ->whereIn('job_offer_status',array('Accepted','Progress'))                ->orderBy('created_at', 'DESC')->get();            $viewModel['progress_jobs'] = $progress_jobs;//            Helpers::debug($freelancer->id);//            Helpers::debug($progress_jobs,1);            return Theme::make('freelancer.progress-job',$viewModel);        }else{            return Redirect::to($this->defaultRoute);        }    }    public function AddComment(){        if(Request::isMethod('post'))        {            $post_data = Input::all();            $freelancer = Freelancer::find($this->user_id);            if(!empty($freelancer->id))            {                $post_data['honour_id'] = $freelancer->id;                $post_data['honour_type'] = 'Freelancer';//                Helpers::debug($post_data,1);                $comment = Comment::Persist($post_data);                if(!empty($comment) && !empty($comment->id))                {                    $comment['client'] = $comment->honour;                    return array(                        'status'=>'200',                        'msg'=>array(array('Comment has been submitted successfully.')),                        'newData' => $comment                    );                }            }        }else{            return Redirect::to('/');        }    }    public function PhaseStatus(){        if(Request::isMethod('post'))        {            $post_data = Input::all();//            Helpers::debug($post_data,1);            $jobPhase = JobPhase::find($post_data['id']);            if(!empty($jobPhase->id))            {                if($post_data['phase_payment_status']=='Done')                    $post_data['phase_payment_status']='Waiting';                $jobPhase = JobPhase::Persist($post_data);                if(!empty($jobPhase) && !empty($jobPhase->id))                {                    return array(                        'status'=>'200',                        'msg'=>array(array('Comment has been submitted successfully.')),                        'newData' => $jobPhase                    );                }            }        }else{            return Redirect::to('/');        }    }    public function payment()    {        $id = Request::segment(3);        $notificationId = Helpers::EncodeDecode($id,false);        $notificationObj = Notification::find($notificationId);        if(count($notificationObj))        {            $paymentId = Helpers::EncodeDecode($notificationObj->object_id,false);            $paymentObj = Payments::find($paymentId);            $viewModel = array();            $viewModel['payment'] = $paymentObj;            $viewModel['notification'] = $notificationObj;            $notificationObj->read_status = 1;            $notificationObj->save();            $freelancer = Freelancer::find($this->user_id);            View::share('notifications',(count($freelancer))? $freelancer->UnreadNotifications : array());            return Theme::make('notification.freelancer.payment',$viewModel);        }else{            Helpers::addMessage(400, 'No notification found');        }    }    public function notifications()    {        $freelancer = Freelancer::find($this->user_id);        if(count($freelancer))        {            $notificationList = $freelancer->Notifications()->paginate(5);            $viewModel = array();            $viewModel['notificationList'] = $notificationList;            return Theme::make('freelancer.notifications',$viewModel);        }else{            return Redirect::to($this->defaultRoute);        }    }    public function FileDownload($name){        $file= Theme::getUploadAbsolutePath('JobPost'). '/' . $name;        $fileInfo = new Symfony\Component\HttpFoundation\File\File($file);        $mime = $fileInfo->getMimeType();        $headers = array(            'Content-Type: '.$mime,        );        return Response::download($file, $name, $headers);    }} 